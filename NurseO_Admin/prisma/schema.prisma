// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Patient {
    id               Int     @id @default(autoincrement())
    name             String
    dob              String
    age              String
    gender           String
    height           String
    weight           String
    time_hour         Int
    time_minute       Int
    studentUID       String? // will be used in feature expension
    lab_doc_url      String?
    imaging_url      String?
    diagnosis        String?
    course_id        Int
    template         Boolean
    patient_bar_code String
    student_id String?

    student         User?             @relation(fields: [studentUID], references: [id]) 
    course          Course            @relation(fields: [course_id], references: [id])
    allergy         Allergy[]         @relation()
    custom_order    Custom_Order[]    @relation()
    social_history  Social_History[]  @relation()
    medical_history Medical_History[] @relation()
    Note Note[] @relation()
    med_orders Med_Order[] @relation()
    immunizations Immunization[] @relation()
    flags Flag[] @relation()
    student_reports Student_Report[] @relation()
}

model Course {
    id   Int    @id @default(autoincrement())
    name String

    patients Patient[] @relation()
    Course_Location_Information Course_Location_Information[] @relation()
}

model Allergy {
    id        Int    @id @default(autoincrement())
    patient_id Int
    name      String
    reaction  String

    patient Patient @relation(fields: [patient_id], references: [id])
}

model Custom_Order {
    id         Int    @id @default(autoincrement())
    patient_id  Int
    order_kind String
    order_type String
    time       String?
    order_text      String @db.Text

    patient Patient @relation(fields: [patient_id], references: [id])
}

model Social_History {
    id        Int    @id @default(autoincrement())
    patient_id Int
    history   String

    patient Patient @relation(fields: [patient_id], references: [id])
}

model Medical_History {
    id        Int    @id @default(autoincrement())
    patient_id Int
    date      String
    title     String
    notes     String

    patient Patient @relation(fields: [patient_id], references: [id])
}

model Immunization {
    id        Int    @id @default(autoincrement())
    patient_id Int
    immunization String

    patient Patient @relation(fields: [patient_id], references: [id])
}

model Flag {
    id        Int    @id @default(autoincrement())
    patient_id Int
    name String
    reason String

    patient Patient @relation(fields: [patient_id], references: [id])
}
model Note {
    id        Int    @id @default(autoincrement())
    patient_id Int
    date      String
    note     String
    report_name String
    report_type String

    patient Patient @relation(fields: [patient_id], references: [id])
}


model Med_Order {
    id Int @id @default(autoincrement())
    patient_id Int
    med_id Int 
    concentration String
    route String
    frequency String
    routine String
    prn_note String?
    notes String
    order_kind String
    order_type String
    time String?
    completed Boolean @default(false)
    hold_reason String?

    patient Patient @relation(fields: [patient_id], references: [id])
    medication Medication @relation(fields: [med_id], references: [id])
    mar_records Mar_Record[] @relation()
}

model Mar_Record {
    id Int @id @default(autoincrement())
    med_order_id Int
    hour Int
    minute Int
    dose String?

    med_order Med_Order @relation(fields: [med_order_id], references: [id])
}

model Medication {
    id Int @id @default(autoincrement())
    brand_name String
    generic_name String @unique
    narcoti_count_needed Boolean

    med_order Med_Order[] @relation()
    med_location_information Medication_Location_Information[] @relation()
}

model Medication_Location_Information {
    id Int @id @default(autoincrement())
    med_id Int
    location_id Int
    drawer String
    slot String
    barcode String
    dose String
    type String

    medication Medication @relation(fields: [med_id], references: [id])
    location Location @relation(fields: [location_id], references: [id])
}

model Location {
    id Int @id @default(autoincrement())
    building String
    station String

    medication_location_information Medication_Location_Information[] @relation()
    course_location_information Course_Location_Information[] @relation()
}

model Course_Location_Information {
    id Int @id @default(autoincrement())
    course_id Int
    location_id Int

    course Course @relation(fields: [course_id], references: [id])
    location Location @relation(fields: [location_id], references: [id])
}


model Student_Report {
    id Int @id @default(autoincrement())
    patient_id Int
    set_name String
    field_name String
    time String
    value String
    date String
    report_type String

    patient Patient @relation(fields: [patient_id], references: [id])
}

model Report_Set {
    id Int @id @default(autoincrement())
    name String
    image_url String?
    image_alt String?
    report_type String

    feilds Report_Field[] @relation()
}

model Report_Field {
    id Int @id @default(autoincrement())
    name String
    field_type String
    add_second_field Boolean @default(false)
    report_set_id Int

    set Report_Set @relation(fields: [report_set_id], references: [id])
    options Report_Option[] @relation()
    labels Report_Label[] @relation()
}

model Report_Option {
    id Int @id @default(autoincrement())
    report_field_id Int
    name String

    report_feilds Report_Field @relation(fields: [report_field_id], references: [id])

}

model Report_Label {
    id Int @id @default(autoincrement())
    report_field_id Int
    name String

    report_feilds Report_Field @relation(fields: [report_field_id], references: [id])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          String?

    patients Patient[] @relation()
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
